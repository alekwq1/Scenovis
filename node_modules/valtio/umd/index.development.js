(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react'), require('proxy-compare'), require('use-sync-external-store/shim'), require('valtio/vanilla')) :
  typeof define === 'function' && define.amd ? define(['exports', 'react', 'proxy-compare', 'use-sync-external-store/shim', 'valtio/vanilla'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.valtio = {}, global.React, global.proxyCompare, global.shim, global.valtioVanilla));
})(this, (function (exports, react, proxyCompare, shim, vanilla) { 'use strict';

  var useAffectedDebugValue = function useAffectedDebugValue(state, affected) {
    var pathList = react.useRef();
    react.useEffect(function () {
      pathList.current = proxyCompare.affectedToPathList(state, affected);
    });
    react.useDebugValue(pathList.current);
  };

  function useSnapshot(proxyObject, options) {
    var affected = new WeakMap();
    var lastAffected = react.useRef();
    var lastCallback = react.useRef();
    var notifyInSync = options == null ? void 0 : options.sync;
    var currSnapshot = shim.useSyncExternalStore(react.useCallback(function (callback) {
      lastCallback.current = callback;
      var unsub = vanilla.subscribe(proxyObject, callback, notifyInSync);
      return function () {
        unsub();
        lastCallback.current = undefined;
      };
    }, [proxyObject, notifyInSync]), react.useMemo(function () {
      var prevSnapshot;
      return function () {
        var nextSnapshot = vanilla.snapshot(proxyObject);

        try {
          if (prevSnapshot && lastAffected.current && !proxyCompare.isChanged(prevSnapshot, nextSnapshot, lastAffected.current, new WeakMap())) {
            return prevSnapshot;
          }
        } catch (e) {}

        return prevSnapshot = nextSnapshot;
      };
    }, [proxyObject]));
    var currVersion = vanilla.getVersion(proxyObject);
    react.useEffect(function () {
      lastAffected.current = affected;

      if (currVersion !== vanilla.getVersion(proxyObject)) {
        if (lastCallback.current) {
          lastCallback.current();
        } else if (typeof process === 'object' && process.env.NODE_ENV !== 'production') {
          console.warn('[Bug] last callback is undefined');
        }
      }
    });

    {
      useAffectedDebugValue(currSnapshot, affected);
    }

    var proxyCache = react.useMemo(function () {
      return new WeakMap();
    }, []);
    return proxyCompare.createProxy(currSnapshot, affected, proxyCache);
  }

  Object.defineProperty(exports, 'getVersion', {
    enumerable: true,
    get: function () { return vanilla.getVersion; }
  });
  Object.defineProperty(exports, 'proxy', {
    enumerable: true,
    get: function () { return vanilla.proxy; }
  });
  Object.defineProperty(exports, 'ref', {
    enumerable: true,
    get: function () { return vanilla.ref; }
  });
  Object.defineProperty(exports, 'snapshot', {
    enumerable: true,
    get: function () { return vanilla.snapshot; }
  });
  Object.defineProperty(exports, 'subscribe', {
    enumerable: true,
    get: function () { return vanilla.subscribe; }
  });
  Object.defineProperty(exports, 'unstable_getHandler', {
    enumerable: true,
    get: function () { return vanilla.getHandler; }
  });
  exports.useSnapshot = useSnapshot;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
