'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('react');
var proxyCompare = require('proxy-compare');
var shim = require('use-sync-external-store/shim');
var vanilla = require('valtio/vanilla');

var useAffectedDebugValue = function useAffectedDebugValue(state, affected) {
  var pathList = react.useRef();
  react.useEffect(function () {
    pathList.current = proxyCompare.affectedToPathList(state, affected);
  });
  react.useDebugValue(pathList.current);
};

function useSnapshot(proxyObject, options) {
  var affected = new WeakMap();
  var lastAffected = react.useRef();
  var lastCallback = react.useRef();
  var notifyInSync = options == null ? void 0 : options.sync;
  var currSnapshot = shim.useSyncExternalStore(react.useCallback(function (callback) {
    lastCallback.current = callback;
    var unsub = vanilla.subscribe(proxyObject, callback, notifyInSync);
    return function () {
      unsub();
      lastCallback.current = undefined;
    };
  }, [proxyObject, notifyInSync]), react.useMemo(function () {
    var prevSnapshot;
    return function () {
      var nextSnapshot = vanilla.snapshot(proxyObject);

      try {
        if (prevSnapshot && lastAffected.current && !proxyCompare.isChanged(prevSnapshot, nextSnapshot, lastAffected.current, new WeakMap())) {
          return prevSnapshot;
        }
      } catch (e) {}

      return prevSnapshot = nextSnapshot;
    };
  }, [proxyObject]));
  var currVersion = vanilla.getVersion(proxyObject);
  react.useEffect(function () {
    lastAffected.current = affected;

    if (currVersion !== vanilla.getVersion(proxyObject)) {
      if (lastCallback.current) {
        lastCallback.current();
      } else if (typeof process === 'object' && process.env.NODE_ENV !== 'production') {
        console.warn('[Bug] last callback is undefined');
      }
    }
  });

  if (process.env.NODE_ENV !== "production") {
    useAffectedDebugValue(currSnapshot, affected);
  }

  var proxyCache = react.useMemo(function () {
    return new WeakMap();
  }, []);
  return proxyCompare.createProxy(currSnapshot, affected, proxyCache);
}

Object.defineProperty(exports, 'getVersion', {
  enumerable: true,
  get: function () { return vanilla.getVersion; }
});
Object.defineProperty(exports, 'proxy', {
  enumerable: true,
  get: function () { return vanilla.proxy; }
});
Object.defineProperty(exports, 'ref', {
  enumerable: true,
  get: function () { return vanilla.ref; }
});
Object.defineProperty(exports, 'snapshot', {
  enumerable: true,
  get: function () { return vanilla.snapshot; }
});
Object.defineProperty(exports, 'subscribe', {
  enumerable: true,
  get: function () { return vanilla.subscribe; }
});
Object.defineProperty(exports, 'unstable_getHandler', {
  enumerable: true,
  get: function () { return vanilla.getHandler; }
});
exports.useSnapshot = useSnapshot;
